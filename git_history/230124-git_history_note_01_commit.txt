// git init
    > 아무 것도 안 한 상태

/////////////////////////////////////////////////////////////////////

// git add myFile1.txt
    > 파일을 하나 add 했어.
    > 파일 안의 내용은 "hello"
    > .git 안에서 일어나는 변화는?
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / index
            - 새로 생김
            - 안에 열어 보니까 내용은 아래.
            > 100644 789819226128377~~~1994e85 0 myFile1.txt
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / objects/78/9819226128377~~~1994e85
            - 새로 생김
            - 안에 열어 보니까 내용은 아래.
            > hello
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    / "objects/78/9819226128377~~~1994e85" 
        - 이 파일 안을 보니까 우리가 새로 add 한 파일 안에 입력한 내용 "hello" 가 들어 있음.
        - 근데 이게 어떤 파일의 내용을 기록한 것인지는 어떻게 알지?
    / "index" 의 변화를 보자.
        - "789819226128377~~~1994e85" 이라는 id 를 봐. 78 로 시작하지. 
    / 이번엔 objects 를 보자. 
        -  objects 안에 78 로 디렉토리가 있어. 
        그 디렉토리 안에 "9819226128377~~~1994e85" 이라는 파일이 있고.
        - objects 안의 디렉토리 78 은 아까 index 안에서 봤던 78 로 시작하는 id 의 78 임.
        - object 안의 파일 이름 "9819226128377~~~1994e85" 는 index 안에서 봤던 id 의 "789819226128377~~~1994e85" 에서 앞에 78 빼고 이후의 id 임.
    / 즉, objects 안에는 우리가 수정한 파일들의 내용이 담겨 있어.
    / 그리고 objects 안에 있는 어떤 object 가 실제 우리가 수정한 어떤 파일과 맵핑되는지는 index 에 들어 있지.
        - 100644 789819226128377~~~1994e85 0 myFile1.txt
        - myFile1.txt 라는 파일은 "789819226128377~~~1994e85" 이라는 id 를 갖는다. 
        - 이 id 에서, 앞의 두 글자는 obejcts 내의 디렉토리 이름이고, 그 이후 글자는 object 이름이다. 
        - 그 object 안에는 myFile1.txt 이라는 파일의 내용물이다.

/////////////////////////////////////////////////////////////////////

// git add myFile2.txt
    > 파일을 하나 더 add 했어.
    > 파일 안의 내용은 "world"
    > .git 안에서 일어나는 변화는?
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / index
            > 100644 789819226128377~~~1994e85 0 myFile1.txt
    ----------------------------------------------------
        / index
            > 100644 789819226128377~~~1994e85 0 myFile1.txt
            > 100644 b68025345d5301a~~~3a0d746 0 myFile2.txt
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / objects/78/9819226128377~~~1994e85
            > hello
    ----------------------------------------------------
        / objects/78/9819226128377~~~1994e85
            > hello
        / objects/b6/8025345d5301a~~~3a0d746
            > world
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

    / 아까 봤던 내용이랑 움직임이 같지.
    우리가 새로 수정한(만든) 파일 "myFile2.txt" 는 "b68025345d5301a~~~3a0d746" 라는 id 를 가졌어. 
    그리고 그 id 와 파일 간의 맵핑 정보는 index 에 저장돼 있지.
    id 에서 앞의 두 글자를 따서 b6 로 디렉토리를 만듦.
    그 디렉토리 안에 (앞의 두 글자를 제외한) 나머지 id 로 object 파일이 만들어져 있음.
    object 파일 안에는 내가 방금 새로 수정한(만든) 파일 "myFile2.txt" 의 내용이 들어 있음. 
    "world"

/////////////////////////////////////////////////////////////////////

// git add myFile3.txt
    / 파일을 하나 더 add 했어.
    / 근데 이 파일은 myFile1.txt 파일을 복사해서 만든 것.
    / 이미 있던 파일을 복사해다가 이름만 바꾼 것.
    / .git 안에서 일어나는 변화는?
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / index
            > 100644 789819226128377~~~1994e85 0 myFile1.txt
            > 100644 b68025345d5301a~~~3a0d746 0 myFile2.txt
            > 100644 789819226128377~~~1994e85 0 myFile3.txt
    ----------------------------------------------------
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / objects/78/9819226128377~~~1994e85
            > hello
        / objects/b6/8025345d5301a~~~3a0d746
            > world
    ----------------------------------------------------
        / objects/78/9819226128377~~~1994e85
            > hello
        / objects/b6/8025345d5301a~~~3a0d746
            > world
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

     / 새로 추가한 파일 "myFile3.txt" 는 이미 있던 파일 "myFile1.txt" 와 내용이 같아.
     / 그러면 "myFile3.txt" 를 추가하면서 object 를 또 새로 만드는 게 아니라, 이미 있던 "myFile1.txt" 의 id 를 같이 씀.
     / 이렇게 파일은 여러 개이더라도 내용이 같으면 object 는 하나를 공유함.
     / 이렇게 하면 중복을 제거하니까 차지하는 용량이 적어짐.
     / 예를 들어서 10GB 짜리 똑같은 파일이 10개 있다고 해서 100GB 가 되는 게 아니라 10GB 하나만 차지함.
     / 똑같은 파일을 커밋을 여러 번 하고 똑같은 파일이 여러 branch 에 존재하더라도 object 는 하나만 생기겠지.

// 여기서 "aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d" 같은 id 는 어떻게 만들어지는지? 
    / hello
    / aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d
    / sha1 이라는 hash 알고리즘을 통과시키면 이런 문자가 나옴.
    / 직접 해보고 싶으면 구글에 "sha1 online" 같은 검색어로 쳐서 변환해주는 사이트 직접 찾아서 돌려 보셈.
    / git 에서는 실제 결과가 다를 수 있는데, 우리는 파일 이름만 가지고 변환시켰지만 git 에서는 내부 정보 같은 것도 함꼐 포함한 채로 변환시키기 때문.

/////////////////////////////////////////////////////////////////////
// git commit -m "first commit"
    / 지금까지 git add 해놓은 파일들 (myFile1.txt/myFile2.txt/myFile3.txt) 을 commit 해보자.
    / .git 안에서 일어나는 변화는?
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / index
            > 100644 789819226128377~~~1994e85 0 myFile1.txt
            > 100644 b68025345d5301a~~~3a0d746 0 myFile2.txt
            > 100644 789819226128377~~~1994e85 0 myFile3.txt
    ----------------------------------------------------
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / objects/78/9819226128377~~~1994e85
            > hello
        / objects/b6/8025345d5301a~~~3a0d746
            > world
    ----------------------------------------------------
        / objects/78/9819226128377~~~1994e85
            > hello
        / objects/b6/8025345d5301a~~~3a0d746
            > world
        / objects/46/e43028b6ca935c~~~943a410
            > tree e42e333fda358~~~53ee494
            > author egoing <egoing@gmail.com> 1486950603 +0900
            > committer egoing <egoing@gmail.com> 1486950603 +0900
            > first commit
        / objects/4e/2e333fda358~~~53ee494
            > 100644 blob 789819226128377~~~1994e85 myFile1.txt
            > 100644 blob b68025345d5301a~~~3a0d746 myFile2.txt
            > 100644 blob 789819226128377~~~1994e85 myFile3.txt
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / COMMIT_EDITMSG
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / logs/HEAD
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / logs/refs/heads/master
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / refs/heads/master
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

    / "objects/b6/e43028b6ca935c~~~943a410" 를 보자
    / 방금 생성된 커밋의 정보가 다 담겨 있어.
    / tree 의 id / author / committer / user.name / user.email / time
    / 여기서 트리의 id 인 "e42e333fda358~~~53ee494" 는 뭘까
    / 이것 자체도 이 id 로 objects 안에 object 가 생김
    / 그 안을 보니까 index 처럼 맵핑 정보가 들어 있음.
    / 어떤 파일과 어떤 id 를 맵핑할지.
    / 즉, 우리가 방금 커밋한 버전의 정보, 누가 커밋했고, 언제 커밋했고, 맵핑 정보를 들고 있는 파일 id 는 뭔지, 등이 모두 object 로 저장됨.
    / 맵핑 정보를 들고 있는 파일도 object 로 만들어지고, 그 object 안에는 다시 파일 이름과 object id 들이 또 맵핑되어 있음.



/////////////////////////////////////////////////////////////////////
// git add myFile2.txt
    / myFile2.txt 안의 내용을 "big world!" 로 수정했어
    / .git 안에서 일어나는 변화는?
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / index
            > 100644 789819226128377~~~1994e85 0 myFile1.txt
            > 100644 2795c87096b42d4~~~5c72c97 0 myFile2.txt
            > 100644 789819226128377~~~1994e85 0 myFile3.txt
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / objects/27/95c87096b42d4~~~5c72c97
            > big world!
    ----------------------------------------------------
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    / 이제 add 는 쉽지.
    / "myFile2.txt" 라는 파일 내용을 수정했다?
    / 그러면 "myFile2.txt" 이라는 파일이 수정된 내용을 담고 있는 object 가 하나 새로 생길 거고.
    / 그 새로 생긴 object 랑 "myFile2.txt" 를 연결 시켜주는 맵핑 정보가 업데이트될 거고. 
    / index 파일에서

/////////////////////////////////////////////////////////////////////
// git commit -m "modified myFile2.txt"
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / index
            > 100644 789819226128377~~~1994e85 0 myFile1.txt
            > 100644 2795c87096b42d4~~~5c72c97 0 myFile2.txt
            > 100644 789819226128377~~~1994e85 0 myFile3.txt
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / objects/27/95c87096b42d4~~~5c72c97
            > big world!
        / objects/46/e43028b6ca935c~~~943a410
            > tree e42e333fda358~~~53ee494
            > author egoing <egoing@gmail.com> 1486950603 +0900
            > committer egoing <egoing@gmail.com> 1486950603 +0900
            > first commit
        / objects/4e/2e333fda358~~~53ee494
            > 100644 blob 789819226128377~~~1994e85 myFile1.txt
            > 100644 blob b68025345d5301a~~~3a0d746 myFile2.txt
            > 100644 blob 789819226128377~~~1994e85 myFile3.txt
    ----------------------------------------------------
        / objects/87/b86ba62639890~~~fa998f2
            > tree ededd83490b5e5bd930~~511fd72
            > parent 46e43028b6ca935c~~~943a410
            > author egoing <egoing@gmail.com> 1486950880 +0900
            > committer egoing <egoing@gmail.com> 1486950880 +0900
            > modified myFile2.txt
        / objects/ed/edd83490b5e5bd930~~~511fd72
            > 100644 blob 789819226128377~~~1994e85 myFile1.txt
            > 100644 blob 2795c87096b42d4~~~5c72c97 myFile2.txt
            > 100644 blob 789819226128377~~~1994e85 myFile3.txt
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / COMMIT_EDITMSG
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / logs/HEAD
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / logs/refs/heads/master
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / refs/heads/master
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    / 보면 "objects/87/b86ba62639890~~~fa998f2" 는 커밋 정보를 담아 놓은 object 임.
    / "objects/46/e43028b6ca935c~~~943a410" 도 마찬가지로 커밋 정보를 저장한 object 라서 형태가 흡사함.
    / 근데 한 가지 다른 점이 있음.
    / "objects/87/b86ba62639890~~~fa998f2" 쪽에는 "parent" 라는 속성이 생김.
    / "objects/46/e43028b6ca935c~~~943a410" 쪽에는 없는 속성임.
    / 각 커밋 object 들은 커밋 정보 + parent 를 들고 있음.
    / 나중에 branch 를 만드는 원리도 짐작할 수 있겠지.
    / linked list array 처럼 parent 정보 하나만 들고 있으면 타고 타고 올라갈 수 있으니까.
    / 정리해 보면, 커밋 object 에는 중요한 정보 두 가지를 들고 있음.
    / 1. tree / 2. parent
    / tree 는 (어떤 파일 <=> 어떤 object) 연결시켜 놓은 맵핑 정보를 들고 있음. 
    / 그래서 커밋할 당시 그 순간의 snapshot 을 찍어서 어떤 파일이 어떤 내용이었는지 기록함.
    / parent 는 바로 이전 커밋, 바로 이전의 버전, 상위 tree 를 찾아갈 수 있는 실마리를 적어둠.


/////////////////////////////////////////////////////////////////////
// git add myDir1/myFile1.txt
    / 이번에는 새로운 디렉토리 "myDir1" 을 만들어 보자.
    / 그리고 "myFile1.txt" 을 복사해서 새로운 디렉토리에 넣었어.
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / index
            > 100644 789819226128377~~~1994e85 0 myFile1.txt
            > 100644 2795c87096b42d4~~~5c72c97 0 myFile2.txt
            > 100644 789819226128377~~~1994e85 0 myFile3.txt
    ----------------------------------------------------
        / index
            > 100644 789819226128377~~~1994e85 0 myDir1/myFile1.txt
            > 100644 789819226128377~~~1994e85 0 myFile1.txt
            > 100644 2795c87096b42d4~~~5c72c97 0 myFile2.txt
            > 100644 789819226128377~~~1994e85 0 myFile3.txt
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    / objects/78/9819226128377~~~1994e85
            > hello
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

    / 디렉토리가 추가되어도 마찬가지.
    / 파일 내옹이 같으면 같은 object 에 맵핑됨.

/////////////////////////////////////////////////////////////////////
// git commit -m "created myDir1"
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / index
            > 100644 789819226128377~~~1994e85 0 myDir1/myFile1.txt
            > 100644 789819226128377~~~1994e85 0 myFile1.txt
            > 100644 2795c87096b42d4~~~5c72c97 0 myFile2.txt
            > 100644 789819226128377~~~1994e85 0 myFile3.txt
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / objects/78/9819226128377~~~1994e85
            > hello
        / objects/87/b86ba62639890~~~fa998f2
            > tree ededd83490b5e5bd930~~511fd72
            > parent 46e43028b6ca935c~~~943a410
            > author egoing <egoing@gmail.com> 1486950880 +0900
            > committer egoing <egoing@gmail.com> 1486950880 +0900
            > modified myFile2.txt
    ----------------------------------------------------
        / objects/a6/8b32add3a077f~~~68c50d2
            > tree 16dacaea08ee7213e65~~~cde4066
            > parent 87b86ba62639890~~~fa998f2
            > author egoing <egoing@gmail.com> 1486950880 +0900
            > committer egoing <egoing@gmail.com> 1486950880 +0900
            > modified myFile2.txt
        / objects/16/dacaea08ee7213e65~~~cde4066
            > 040000 tree 9f8df35e4932276~~~3fdb37c myDir1
            > 100644 blob 789819226128377~~~1994e85 myFile1.txt
            > 100644 blob 2795c87096b42d4~~~5c72c97 myFile2.txt
            > 100644 blob 789819226128377~~~1994e85 myFile3.txt
        / objects/9f/8df35e4932276~~~3fdb37c 
            > 100644 blob 789819226128377~~~1994e85 myFile1.txt
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / COMMIT_EDITMSG
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / logs/HEAD
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / logs/refs/heads/master
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        / refs/heads/master
    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    / 커밋 object "objects/a6/8b32add3a077f~~~68c50d2" 안을 볼까.
    / 그 커밋을 하는 순간에 찍은 snapshot 은 트리 object "16dacaea08ee7213e65~~~cde4066" 안에 들어 있음.
    / 그럼 트리 object "objects/16/dacaea08ee7213e65~~~cde4066" 안을 볼까.
    / 그 안에 다시 트리 object 가 있음. "040000 tree 9f8df35e4932276~~~3fdb37c myDir1"
    / 디렉토리 단위로 트리 object 를 넣나 봄.
    / 그럼 다시 myDir1 디렉토리를 snapshot 으로 찍어둔 트리 object "9f8df35e4932276~~~3fdb37c" 를 볼까
    / "100644 blob 789819226128377~~~1994e85 myFile1.txt" 가 들어 있어.
    / 여전히 중복되는 정보는 하나의 콘텐츠 object 를 공유하고, 대신 디렉토리 tree 만 독립적으로 만들어짐.
    / 지금까지 발견된 object 의 종류는 총 세 가지.
    / commit object / tree object / blob object


/////////////////////////////////////////////////////////////////////
// git status
    / 자. git status 를 판단하려면 크게 세 가지가 필요해.
    / 원본 파일 / index 정보 / 가장 마지막 커밋 정보
    / Changes not staged for commit
        > 원본 파일은 수정이 됐어. 근데 아직 add 되지 않은 상태.
        > 이 상태를 판단하려면 원본 파일 + index 정보를 봐야 함.
        > index 정보에는 파일과 object 가 맵핑되어 있어.
        > 파일과 맵핑되어 있는 object 의 내용을 원본 파일의 내용과 비교함.
        > 근데 둘이 내용이 다르다? 
        > 현재 index 가 기억하는 파일 내용으로부터 원본 파일의 내용은 수정되었다.
        (동시에 index 와 commit 정보는 같겠지.)
        > 원본 파일은 수정되었지만 아직 add 되지는 않았다.
    / Changes to be committed
        > 원본 파일을 수정했어. 그리고 git add 까지 올렸어.
        > 그러면 새로 수정된 원본 파일의 내용을 기록해 두는 object 가 새로 생김.
        > 그리고 index 에서는 내가 수정한 파일을 이 object 와 맵핑시켜둠.
        > 결과적으로, 내가 수정한 원본 파일과, index 에서 해당 파일과 맵핑된 object 를 비교했을 때, 그 두 내용이 같음. (수정된 내용이 index 안에 맵핑된 object 에도 반영되어 있음)
        > 그러면서 동시에, 가장 마지막에 커밋한 snapshot 에서 맵핑된 object 와는 또 내용이 다름.
        > 원본 파일과 index 가 같고, index 와 commit 은 다름.
        > add 되었지만 아직 commit 되지는 않았다.
    / nothing to commit, working directory clean
        > 원본 파일 == index 에 저장된 snapshot === 가장 마지막 커밋에 저장된 snapshot
        




